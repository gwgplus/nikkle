#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
YOLO OCR Ê∏¨Ë©¶Á®ãÂºè
‰ΩøÁî® PyQt5 Êèê‰æõÂúñÂΩ¢ÁïåÈù¢‰æÜÊ∏¨Ë©¶ YOLO OCR ÂäüËÉΩ
"""

import sys
import os
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                             QHBoxLayout, QPushButton, QLabel, QTextEdit, 
                             QFileDialog, QMessageBox, QProgressBar, QGroupBox)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer
from PyQt5.QtGui import QFont, QPixmap
from PIL import Image

# Ê∑ªÂä†Áï∂ÂâçÁõÆÈåÑÂà∞ Python Ë∑ØÂæë
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from yolo_ocr import YOLOOCR
    YOLO_AVAILABLE = True
except ImportError as e:
    YOLO_AVAILABLE = False
    print(f"YOLO OCR Ê®°ÁµÑÂ∞éÂÖ•Â§±Êïó: {e}")


class OCRWorker(QThread):
    """OCR ËôïÁêÜÂ∑•‰ΩúÁ∑öÁ®ã"""
    finished = pyqtSignal(dict)
    error = pyqtSignal(str)
    
    def __init__(self, image_path, yolo_ocr):
        super().__init__()
        self.image_path = image_path
        self.yolo_ocr = yolo_ocr
    
    def run(self):
        """Âü∑Ë°å OCR ËôïÁêÜ"""
        try:
            
            result = self.yolo_ocr.access_ocr(self.image_path)
            self.finished.emit(result)
        except Exception as e:
            self.error.emit(str(e))


class YOLOOCRTestWindow(QMainWindow):
    """YOLO OCR Ê∏¨Ë©¶Ë¶ñÁ™ó"""
    
    def __init__(self):
        super().__init__()
        self.yolo_ocr = None
        self.current_image_path = None
        self.worker_thread = None
        self.init_ui()
        self.init_yolo_ocr()
        
    def init_ui(self):
        """ÂàùÂßãÂåñ‰ΩøÁî®ËÄÖ‰ªãÈù¢"""
        self.setWindowTitle("YOLO OCR Ê∏¨Ë©¶Á®ãÂºè")
        self.setGeometry(100, 100, 800, 600)
        
        # ‰∏≠Â§Æ widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # ‰∏ª‰ΩàÂ±Ä
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # Ê®ôÈ°å
        title_label = QLabel("YOLO OCR Ê∏¨Ë©¶Á®ãÂºè")
        title_label.setFont(QFont("Êñ∞Á¥∞ÊòéÈ´î", 16, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title_label)
        
        # ÁãÄÊÖãÁæ§ÁµÑ
        status_group = QGroupBox("ÁãÄÊÖã")
        status_layout = QVBoxLayout(status_group)
        
        self.status_label = QLabel("Ê∫ñÂÇôÂ∞±Á∑í")
        self.status_label.setFont(QFont("Êñ∞Á¥∞ÊòéÈ´î", 10))
        status_layout.addWidget(self.status_label)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        status_layout.addWidget(self.progress_bar)
        
        main_layout.addWidget(status_group)
        
        # ÂúñÁâáÈÅ∏ÊìáÁæ§ÁµÑ
        image_group = QGroupBox("ÂúñÁâáÈÅ∏Êìá")
        image_layout = QVBoxLayout(image_group)
        
        # ÊåâÈàïÂçÄÂüü
        button_layout = QHBoxLayout()
        
        self.select_button = QPushButton("ÈÅ∏ÊìáÂúñÁâá")
        self.select_button.setFont(QFont("Êñ∞Á¥∞ÊòéÈ´î", 12))
        self.select_button.clicked.connect(self.select_image)
        button_layout.addWidget(self.select_button)
        
        self.ocr_button = QPushButton("Âü∑Ë°å OCR")
        self.ocr_button.setFont(QFont("Êñ∞Á¥∞ÊòéÈ´î", 12))
        self.ocr_button.clicked.connect(self.run_ocr)
        self.ocr_button.setEnabled(False)
        button_layout.addWidget(self.ocr_button)
        
        self.clear_button = QPushButton("Ê∏ÖÈô§ÁµêÊûú")
        self.clear_button.setFont(QFont("Êñ∞Á¥∞ÊòéÈ´î", 12))
        self.clear_button.clicked.connect(self.clear_results)
        button_layout.addWidget(self.clear_button)
        
        button_layout.addStretch()
        image_layout.addLayout(button_layout)
        
        # ÂúñÁâáË∑ØÂæëÈ°ØÁ§∫
        self.image_path_label = QLabel("Êú™ÈÅ∏ÊìáÂúñÁâá")
        self.image_path_label.setFont(QFont("Êñ∞Á¥∞ÊòéÈ´î", 10))
        self.image_path_label.setWordWrap(True)
        self.image_path_label.setStyleSheet("QLabel { background-color: #f0f0f0; padding: 5px; border: 1px solid #ccc; }")
        image_layout.addWidget(self.image_path_label)
        
        main_layout.addWidget(image_group)
        
        # ÁµêÊûúÈ°ØÁ§∫Áæ§ÁµÑ
        result_group = QGroupBox("OCR ÁµêÊûú")
        result_layout = QVBoxLayout(result_group)
        
        # ÊôÇÈñìÁµ±Ë®àÊ®ôÁ±§
        self.timing_label = QLabel("‚è±Ô∏è ÊôÇÈñìÁµ±Ë®à: Á≠âÂæÖËôïÁêÜ...")
        self.timing_label.setFont(QFont("Êñ∞Á¥∞ÊòéÈ´î", 10, QFont.Bold))
        self.timing_label.setStyleSheet("QLabel { background-color: #e8f4fd; padding: 8px; border: 1px solid #b3d9ff; border-radius: 4px; }")
        self.timing_label.setWordWrap(True)
        result_layout.addWidget(self.timing_label)
        
        self.result_text = QTextEdit()
        self.result_text.setFont(QFont("Consolas", 10))
        self.result_text.setReadOnly(True)
        self.result_text.setMinimumHeight(200)
        result_layout.addWidget(self.result_text)
        
        main_layout.addWidget(result_group)
        
        # Ê®°ÂûãË≥áË®äÁæ§ÁµÑ
        model_group = QGroupBox("Ê®°ÂûãË≥áË®ä")
        model_layout = QVBoxLayout(model_group)
        
        self.model_info_text = QTextEdit()
        self.model_info_text.setFont(QFont("Consolas", 9))
        self.model_info_text.setReadOnly(True)
        self.model_info_text.setMaximumHeight(100)
        model_layout.addWidget(self.model_info_text)
        
        main_layout.addWidget(model_group)
        
    def init_yolo_ocr(self):
        """ÂàùÂßãÂåñ YOLO OCR"""
        if not YOLO_AVAILABLE:
            self.status_label.setText("‚ùå YOLO OCR Ê®°ÁµÑ‰∏çÂèØÁî®")
            self.select_button.setEnabled(False)
            self.model_info_text.setPlainText("YOLO OCR Ê®°ÁµÑÂ∞éÂÖ•Â§±ÊïóÔºåË´ãÊ™¢Êü•‰æùË≥¥È†Ö")
            return
        
        try:
            self.yolo_ocr = YOLOOCR()
            self.status_label.setText("‚úÖ YOLO OCR Â∑≤ÂàùÂßãÂåñ")
            
            # È°ØÁ§∫Ê®°ÂûãË≥áË®ä
            model_info = self.yolo_ocr.get_model_info()
            info_text = f"Ê®°ÂûãË∑ØÂæë: {model_info.get('model_path', 'N/A')}\n"
            info_text += f"TrOCR Ë∑ØÂæë: {model_info.get('trocr_path', 'N/A')}\n"
            info_text += f"Â≠óÈ´îË∑ØÂæë: {model_info.get('font_path', 'N/A')}\n"
            info_text += f"Ê®°ÂûãËºâÂÖ•ÁãÄÊÖã: {'Â∑≤ËºâÂÖ•' if model_info.get('models_loaded', False) else 'Êú™ËºâÂÖ•'}"
            
            self.model_info_text.setPlainText(info_text)
            
        except Exception as e:
            self.status_label.setText(f"‚ùå YOLO OCR ÂàùÂßãÂåñÂ§±Êïó: {str(e)}")
            self.select_button.setEnabled(False)
            self.model_info_text.setPlainText(f"ÂàùÂßãÂåñÈåØË™§: {str(e)}")
    
    def select_image(self):
        """ÈÅ∏ÊìáÂúñÁâáÊ™îÊ°à"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "ÈÅ∏ÊìáÂúñÁâáÊ™îÊ°à",
            "",
            "ÂúñÁâáÊ™îÊ°à (*.jpg *.jpeg *.png *.bmp *.tiff *.tif);;ÊâÄÊúâÊ™îÊ°à (*)"
        )
        
        if file_path:
            self.current_image_path = file_path
            self.image_path_label.setText(f"Â∑≤ÈÅ∏Êìá: {file_path}")
            self.ocr_button.setEnabled(True)
            self.status_label.setText("‚úÖ ÂúñÁâáÂ∑≤ÈÅ∏ÊìáÔºåÂèØ‰ª•Âü∑Ë°å OCR")
            
            # È°ØÁ§∫ÂúñÁâáË≥áË®ä
            try:
                with Image.open(file_path) as img:
                    width, height = img.size
                    mode = img.mode
                    self.status_label.setText(f"‚úÖ ÂúñÁâáÂ∑≤ÈÅ∏Êìá ({width}x{height}, {mode})")
            except Exception as e:
                self.status_label.setText(f"‚ö†Ô∏è ÂúñÁâáÂ∑≤ÈÅ∏ÊìáÔºå‰ΩÜÁÑ°Ê≥ïËÆÄÂèñË≥áË®ä: {str(e)}")
    
    def run_ocr(self):
        """Âü∑Ë°å OCR"""
        if not self.current_image_path:
            QMessageBox.warning(self, "Ë≠¶Âëä", "Ë´ãÂÖàÈÅ∏ÊìáÂúñÁâáÊ™îÊ°à")
            return
        
        if not self.yolo_ocr:
            QMessageBox.critical(self, "ÈåØË™§", "YOLO OCR Êú™ÂàùÂßãÂåñ")
            return
        
        # Á¶ÅÁî®ÊåâÈàï
        self.select_button.setEnabled(False)
        self.ocr_button.setEnabled(False)
        self.clear_button.setEnabled(False)
        
        # È°ØÁ§∫ÈÄ≤Â∫¶Ê¢ù
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # ÁÑ°ÈôêÈÄ≤Â∫¶Ê¢ù
        
        self.status_label.setText("üîÑ Ê≠£Âú®Âü∑Ë°å OCR...")
        self.timing_label.setText("‚è±Ô∏è ÊôÇÈñìÁµ±Ë®à: ËôïÁêÜ‰∏≠...")
        
        # Âú®Â∑•‰ΩúÁ∑öÁ®ã‰∏≠Âü∑Ë°å OCR
        self.worker_thread = OCRWorker(self.current_image_path, self.yolo_ocr)
        self.worker_thread.finished.connect(self.on_ocr_finished)
        self.worker_thread.error.connect(self.on_ocr_error)
        self.worker_thread.start()
    
    def on_ocr_finished(self, result):
        """OCR ÂÆåÊàêËôïÁêÜ"""
        # Èö±ËóèÈÄ≤Â∫¶Ê¢ù
        self.progress_bar.setVisible(False)
        
        # ÂïüÁî®ÊåâÈàï
        self.select_button.setEnabled(True)
        self.ocr_button.setEnabled(True)
        self.clear_button.setEnabled(True)
        
        # È°ØÁ§∫ÁµêÊûú
        if result['success']:
            self.status_label.setText("‚úÖ OCR Âü∑Ë°åÊàêÂäü")
            
            # Êõ¥Êñ∞ÊôÇÈñìÁµ±Ë®àÊ®ôÁ±§
            if 'timing' in result:
                timing = result['timing']
                timing_text = f"‚è±Ô∏è Á∏ΩÊôÇÈñì: {timing['total_ms']} ms | "
                timing_text += f"YOLO: {timing['yolo_ms']} ms | "
                timing_text += f"TrOCR: {timing['trocr_ms']} ms | "
                timing_text += f"ÊñáÂ≠óÊï∏: {timing['text_count']}"
                
                if timing['text_count'] > 0:
                    avg_per_text = timing['trocr_ms'] / timing['text_count']
                    timing_text += f" | Âπ≥Âùá: {avg_per_text:.1f} ms/Â≠ó"
                
                self.timing_label.setText(timing_text)
            else:
                self.timing_label.setText("‚è±Ô∏è ÊôÇÈñìÁµ±Ë®à: ÁÑ°Ë®àÊôÇÊï∏Êìö")
            
            # Ê†ºÂºèÂåñÁµêÊûú
            result_text = f"OCR Âü∑Ë°åÊàêÂäüÔºÅ\n"
            result_text += f"{'='*50}\n"
            
            # È°ØÁ§∫Ë©≥Á¥∞ÊôÇÈñìÁµ±Ë®à
            if 'timing' in result:
                timing = result['timing']
                result_text += f"‚è±Ô∏è  Ë©≥Á¥∞ÊôÇÈñìÁµ±Ë®à:\n"
                result_text += f"  Á∏ΩËôïÁêÜÊôÇÈñì: {timing['total_ms']} ms\n"
                result_text += f"  YOLO Ê™¢Ê∏¨: {timing['yolo_ms']} ms\n"
                result_text += f"  TrOCR Ë≠òÂà•: {timing['trocr_ms']} ms\n"
                result_text += f"  Ë≠òÂà•ÊñáÂ≠óÊï∏Èáè: {timing['text_count']}\n"
                
                if timing['text_count'] > 0:
                    avg_per_text = timing['trocr_ms'] / timing['text_count']
                    result_text += f"  Âπ≥ÂùáÊØèÊñáÂ≠ó: {avg_per_text:.2f} ms\n"
                
                # Ë®àÁÆóÂêÑÈöéÊÆµ‰ΩîÊØî
                if timing['total_ms'] > 0:
                    yolo_percent = (timing['yolo_ms'] / timing['total_ms']) * 100
                    trocr_percent = (timing['trocr_ms'] / timing['total_ms']) * 100
                    result_text += f"  ÊôÇÈñì‰ΩîÊØî - YOLO: {yolo_percent:.1f}%, TrOCR: {trocr_percent:.1f}%\n"
                
                result_text += f"{'='*50}\n"
            
            result_text += f"üìù Ê™¢Ê∏¨ÁµêÊûú:\n"
            for i, item in enumerate(result['results'], 1):
                result_text += f"  ÁµêÊûú {i}:\n"
                result_text += f"    ÊñáÂ≠ó: {item['text']}\n"
                result_text += f"    ‰ΩçÁΩÆ: {item['bbox']}\n" 
                result_text += f"    ‰ø°ÂøÉÂ∫¶: {item['confidence']:.3f}\n"
                result_text += f"    {'-'*30}\n"
            result_text += f"{'='*50}\n"
            
            if 'bbox_results' in result and result['bbox_results']:
                result_text += f"Ê™¢Ê∏¨Âà∞ÁöÑÊñáÂ≠óÂçÄÂüü:\n"
                for i, bbox in enumerate(result['bbox_results'], 1):
                    result_text += f"  ÂçÄÂüü {i}: {bbox.get('text', 'N/A')} (‰ø°ÂøÉÂ∫¶: {bbox.get('confidence', 'N/A')})\n"
            
            result_text += f"\nÂéüÂßãÁµêÊûú:\n{result}"
            
            self.result_text.setPlainText(result_text)
            
            # È°ØÁ§∫ÊàêÂäüË®äÊÅØ
            #QMessageBox.information(self, "ÊàêÂäü", f"OCR Ë≠òÂà•ÊàêÂäüÔºÅ\nÁµêÊûú: {result['ocr_result']}")
            
        else:
            self.status_label.setText("‚ùå OCR Âü∑Ë°åÂ§±Êïó")
            error_msg = result.get('error', 'Êú™Áü•ÈåØË™§')
            
            # Âç≥‰ΩøÂ§±Êïó‰πüÈ°ØÁ§∫ÊôÇÈñìÁµ±Ë®àÔºàÂ¶ÇÊûúÊúâÔºâ
            if 'timing' in result:
                timing = result['timing']
                self.timing_label.setText(f"‚è±Ô∏è ËôïÁêÜÊôÇÈñì: {timing['total_ms']} ms (Â§±Êïó)")
            else:
                self.timing_label.setText("‚è±Ô∏è ÊôÇÈñìÁµ±Ë®à: ËôïÁêÜÂ§±Êïó")
            
            error_text = f"OCR Âü∑Ë°åÂ§±Êïó: {error_msg}\n"
            if 'timing' in result:
                timing = result['timing']
                error_text += f"\n‚è±Ô∏è  ËôïÁêÜÊôÇÈñì: {timing['total_ms']} ms\n"
            
            self.result_text.setPlainText(error_text)
            QMessageBox.warning(self, "Â§±Êïó", f"OCR Âü∑Ë°åÂ§±Êïó: {error_msg}")
    
    def on_ocr_error(self, error_msg):
        """OCR ÈåØË™§ËôïÁêÜ"""
        # Èö±ËóèÈÄ≤Â∫¶Ê¢ù
        self.progress_bar.setVisible(False)
        
        # ÂïüÁî®ÊåâÈàï
        self.select_button.setEnabled(True)
        self.ocr_button.setEnabled(True)
        self.clear_button.setEnabled(True)
        
        self.status_label.setText("‚ùå OCR Âü∑Ë°åÈåØË™§")
        self.timing_label.setText("‚è±Ô∏è ÊôÇÈñìÁµ±Ë®à: Âü∑Ë°åÈåØË™§")
        self.result_text.setPlainText(f"OCR Âü∑Ë°åÈåØË™§: {error_msg}")
        QMessageBox.critical(self, "ÈåØË™§", f"OCR Âü∑Ë°åÈåØË™§: {error_msg}")
    
    def clear_results(self):
        """Ê∏ÖÈô§ÁµêÊûú"""
        self.result_text.clear()
        self.timing_label.setText("‚è±Ô∏è ÊôÇÈñìÁµ±Ë®à: Á≠âÂæÖËôïÁêÜ...")
        self.status_label.setText("Ê∫ñÂÇôÂ∞±Á∑í")
        if self.current_image_path:
            self.status_label.setText("‚úÖ ÂúñÁâáÂ∑≤ÈÅ∏ÊìáÔºåÂèØ‰ª•Âü∑Ë°å OCR")


def main():
    """‰∏ªÁ®ãÂºè"""
    app = QApplication(sys.argv)
    
    # Ë®≠ÂÆöÊáâÁî®Á®ãÂºèÂ≠óÈ´î
    font = QFont("Êñ∞Á¥∞ÊòéÈ´î", 10)
    app.setFont(font)
    
    # ÂâµÂª∫‰∏ªË¶ñÁ™ó
    window = YOLOOCRTestWindow()
    window.show()
    
    # Âü∑Ë°åÊáâÁî®Á®ãÂºè
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
